#define _CRT_SECURE_NO_WARNINGS

#include"SMS.h"
#include"UI.h"
#include"File.h"


extern const char admAccount[MAX_ACCOUNT] = "admin";
extern const char admPassword[MAX_PASSWORD] = "123456";

int main()
{
	const char* targetFilename = "SMS.txt";
	const char* sourceFilename[10] = { "BLL.c","SMS.h","UI.h","test.c","SMS.c","DAL.c"};
	FILE* target = fopen(targetFilename, "w");
	if (target == NULL) {
		perror("-------------------无法创建目标文件-------------------");
		return 1;
	}
	fclose(target);
	for (int i = 0; i < 6; i++)
	{
		File(sourceFilename[i], targetFilename);
	}

	FILE* studentFile = fopen("StudentMessage", "a");
	fclose(studentFile);
	FILE* teacherFile = fopen("TeacherMessage", "a");
	fclose(teacherFile);


	studentInit(&S);
	teacherInit(&T);

	int choice;
	int num;
	char account[MAX_ACCOUNT];
	char password[MAX_PASSWORD];

	T = readTeachersFromFile("TeacherMessage");
	S = readStudentsFromFile("StudentMessage");

	Student* p = S;


Menu:
	//进入主菜单
	mainMenu();
	choice = ifInt();
	system("cls");//清屏

	switch (choice)
	{
	case 0://退出
		printf("----------------感谢您的使用-----------------\n");
		return 0;
	case 1://学生登录
		logMenu();
		printf("账号：");
		scanf("%s", account);
		getchar();
		printf("\n");
		if (!strcmp("return", account))//返回
		{
			system("cls");
			goto Menu;
			break;
		}
		printf("密码：");
		scanf("%s", password);
		//Sleep(10000);
		//system("cls");//清屏
		Student* pos = accStudentSearch(S, account);//根据账号查找信息
		if (pos)//有该账号
		{
			if (strcmp(password, pos->password))//密码输入错误
			{
				printf("----------账号或密码输入错误-------------\n");
				Sleep(1000);
				system("cls");
				goto Menu;
			}
			else
			{
			stuChoose:
				system("cls");
				stuMenu();//进入学生页面
				choice = ifInt();
				system("cls");

				switch (choice)
				{
				case 1://成绩查询
					printf("请输入您的学号:");
					scanf("%d", &num);
					pos = numberSearch(S, num);
					if (pos == NULL)
					{
						printf("----------学号输入有误！-------------\n");
						Sleep(1000);
						system("cls");
					}
					else
					{
						studentPrint(pos);
						Sleep(2000);
						
					}
					goto stuChoose;
					break;
				case 2://返回上一级
					goto Menu;
					break;
				default:
					printf("-------------输入错误，请重新输入------------\n");
					Sleep(1000);
					system("cls");
					goto stuChoose;
					break;
				}
			}
		}
		else//没有该账号
		{
			printf("----------账号或密码输入错误-----------\n");
			Sleep(1000);
			system("cls");
			goto Menu;
		}
		break;

	case 2://教师登录
		//根据输入的账号遍历查找
		logMenu();
		printf("账号：");
		scanf("%s", account);
		printf("\n");
		if (!strcmp("return", account))//返回
		{
			system("cls");
			goto Menu;
			break;
		}
		printf("密码：");
		scanf("%s", password);
		getchar();


		Teacher* pos_ = accTeacherSearch(T, account);//根据账号查找信息
		if (pos_)//有该账号
		{
			if (strcmp(password, pos_->password))//密码输入错误
			{
				printf("-----------账号或密码输入错误-----------\n");
				Sleep(1000);
				system("cls");
			}
			else//进入教师页面
			{
			tea:
				system("cls");
				teaMenu();
				choice = ifInt();
				system("cls");

				switch (choice)
				{
				case 1://增加信息
					studentAdd(&S, NULL, NULL);
					goto tea;
					break;
				case 2://删除信息
					printf("请输入您要删除的学生学号：");
					scanf("%d", &num);
					printf("\n");
					pos = numberSearch(S, num);
					if (pos)
					{
						studentPop(&S, pos);
					}
					else
					{
						printf("学号有误\n");
					}
					goto tea;
					break;
				case 3://修改信息
					printf("请输入您要修改的学生学号：");
					scanf("%d", &num);
					printf("\n");
					pos = numberSearch(S, num);
					if (pos)
					{
						studentChange(&S, pos);
					}
					else
					{
						printf("学号有误!\n");
					}
					goto tea;
					break;
				case 4://查找信息
					printf("请输入您要查找的学生学号：");
					scanf("%d", &num);
					printf("\n");
					pos = numberSearch(S, num);
					if (pos)
					{
						studentPrint(pos);
					}
					else
					{
						printf("学号有误！\n");
						goto tea;
					}
					break;
				case 5://查看班内成绩
					teacherLook(S);
					goto tea;
					break;
				case 6://返回上一级
					goto Menu;
					break;
				default://输入错误
					printf("输入错误，请重新输入\n");
					goto tea;
					break;
				}
			}
		}
		else//没有该账号
		{
			printf("-----------账号或密码输入错误-----------\n");
			Sleep(1000);
			system("cls");
			goto Menu;
		}
		break;

	case 3://管理员登录

		logMenu();
		printf("账号：");
		scanf("%s", account);
		getchar();


		if (!strcmp("return", account))//返回
		{
			system("cls");
			goto Menu;
		}

		printf("密码：");
		scanf("%s", password);
	admMenu:
		if (!strcmp(admAccount, account) && !strcmp(admPassword, password))//登录
		{
			system("cls");
			admMenu();
			choice = ifInt();
			
			switch (choice)
			{
			case 1://删除账号密码
				printf("请输入您要删除的学生学号：");
				num = ifInt();
				pos = numberSearch(S, num);
				if (pos == NULL)
				{
					printf("-----------学号输入有误！------------\n");
					Sleep(1000);
					system("cls");
				}
				else
				{
					studentPop(&S, pos);
				}
				goto admMenu;
				break;
			case 2://修改账号密码
				printf("请输入您要修改的学生学号：");
				num = ifInt();
				pos = numberSearch(S, num);
				if (pos == NULL)
				{
					printf("----------学号输入有误！-----------\n");
					Sleep(1000);
					system("cls");
				}
				else
				{
					studentAccChange(&S, pos);
				}
				goto admMenu;
				break;
			case 3://查找账号密码
				printf("请输入您要查找的学生学号：");
				num = ifInt();
				pos = numberSearch(S, num);
				if (pos == NULL)
				{
					printf("----------学号输入有误！-----------\n");
					Sleep(1000);
					system("cls");
				}
				else
				{
					pasSearch(pos);
				}
				goto admMenu;
				break;
			case 4://从文件读取所有账号密码
				p = S;
				while (p)
				{
					pasSearch(p);
					p = p->next;
					if (p == S)
					{
						break;
					}
				}
				goto Menu;
				break;
			case 5://从文件导出所有账号密码
				p = S;
				while (p)
				{
					pasSearch(p);
					p = p->next;
					if (p == S)
					{
						break;
					}
				}
				goto Menu;
				break;
			case 6://录入教师账号
				teacherInit(&T);
				teacherAdd(&T);
				goto admMenu;
				break;
			case 0://返回上一级
				system("cls");
				goto Menu;
				break;

			}
		}
		else//没有该账号
		{
			printf("------------账号或密码输入错误------------\n");
			Sleep(1000);
			system("cls");
			goto Menu;
		}

		break;
	case 4://密码修改
		printf("请输入您的账号:\n");
		scanf("%s", account);
		pos = accStudentSearch(S, account);
		if (pos == NULL)
		{
			printf("------------该账号不存在--------------\n");
			Sleep(1000);
			system("cls");
			goto Menu;
		}
		else
		{
			printf("密码：");
			pasChange(&S, pos);
			printf("修改成功！\n");
			Sleep(1000);
			system("cls");
			goto Menu;
		}
		break;
	case 5://账号注册
		registerMenu();
		Register();
		goto Menu;
		break;
	default:
		printf("----------输入错误，请重新输入-----------\n");
		Sleep(1000);
		system("cls");
		goto Menu;
		break;
	}
	return 0;
}#pragma once

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<assert.h>

#define MAX_NAME 50
#define MAX_SEX 5
#define MAX_CLASS 200
#define MAX_ACCOUNT 20 
#define MAX_PASSWORD 20
#define MAX 100




//定义学生结构
//名字，学号，成绩,年龄，性别, 班级
typedef struct Student
{
	int number;
	char name[MAX_NAME];
	int age;
	char sex[MAX_SEX];
	int class;//所在班级 输入数字
	double score;

	char account[MAX_ACCOUNT];
	char password[MAX_PASSWORD];
	struct Student* prev;//双向链表的前一个
	struct Student* next; 
}Student;

//教师结构体 用来存储所在班级 账号密码
typedef struct Teacher
{
	char name[MAX_NAME];
	int class;
	char account[MAX_ACCOUNT];
	char password[MAX_PASSWORD];

	struct Teacher* next;
}Teacher;

Student* S;
Teacher* T;

//学生：成绩查询，查询本班成绩，返回上一级
//教师：增删查改学生信息，查看班内成绩，返回上一级
//管理员：增删改查账密以及学生信息，从文件录入所有账号密码，从文件导出所有账号密码，返回上一级

void studentInit(Student** pphead);//初始化链表
void studentPrint(Student* pos);//打印指定结点的数据

void Register();//注册
Student* getNode(char* account, char* password);//得到一个新结点

Student* numberSearch(Student* phead, int number);//按学号查询学生信息--返回结点
void studentChange(Student** pphead, Student* pos);//按照结点修改学生信息
void studentAccChange(Student** pphead, Student* pos);//修改学生的账号密码

void studentAdd(Student** pphead, char* account,char* password);//添加学生信息
void insertFront(Student** pphead, Student* pos);//任意位置前添加新结点
void insertBack(Student** pphead, Student* pos);//任意位置后添加新结点

void studentPop(Student** pphead, Student* pos);//删除指定位置的数据

void teacherInit(Teacher** pphead);//教师结构体的初始化
void teacherAdd(Teacher** pphead);//教师信息添加
void teacherLook(Student* phead);//教师查看班内成绩


int ifInt();//判断输入是否是整数

Student* accStudentSearch(Student* phead, char* account);//根据账号查找学生
Teacher* accTeacherSearch(Teacher* phead, char* account);//根据账号查找学生


#pragma once

#include<stdio.h>
#include<windows.h>

//这一层是界面层的头文件

//学生：成绩查询，查询本班成绩，返回上一级
//教师：增删查改学生信息，查看班内成绩，返回上一级
//管理员：增删改查账密以及学生信息，从文件录入所有账号密码，从文件导出所有账号密码，返回上一级



void mainMenu( );//--选择 ->  登录界面 or 账号相关

void logMenu();//登录都是一样的--->只有账号和密码，其他的情况在上一级提到
void registerMenu();//注册

void teaMenu();//教师菜单
void stuMenu();//学生菜单
void admMenu();//管理员菜单

void pasChange(Student** pphead, Student* pos);//修改账号密码
void pasSearch(Student* pos);//查找账号密码



//#define _CRT_SECURE_NO_WARNINGS
//
//#include"SMS.h"
//#include"UI.h"
//
//
//void test01()
//{
//	Student* S = (Student*)malloc(sizeof(Student));
//	studentInit(&S);
//
//	studentAdd(&S, NULL, NULL);
//	studentAdd(&S, NULL, NULL);
//	studentAdd(&S, NULL, NULL);
//
//	//studentAdd(&S);
//	Student* pos = numberSearch(S, 3);
//	//studentChange(&S, pos);
//	//insertFront(&S, pos);
//	//insertBack(&S, pos);
//	studentPop(&S, pos);
//}
//
//int main()
//{
//	test01();
//	//mainMenu();
//	//int choice;
//	//scanf("%d", &choice);
//	//system("cls");
//
//	return 0;
//}#define _CRT_SECURE_NO_WARNINGS

#include"SMS.h"
#include"UI.h"

//1. ***数据录入：录入系统所需的数据信息。将录入的数据使用链表这一数据结构进行组织和管理。
//2. 数据存储：将录入的数据以文件的形式进行存储，优先推荐使用二进制文件格式。如果使用二进制文件存储，需要将数据按照一定的格式和结构转换为二进制形式，然后写入文件中。如果是文本文件存储，则需要将数据按照一定的文本格式（如JSON等）组织好，再写入文件中。
//3. 数据读写：能够从存储文件中读取数据，如果是二进制文件，可以直接按照数据的结构和格式从文件中读取二进制数据，并将其转换回相应的数据结构（如链表中的节点）。可以将数据写入到存储文件中，对于二进制文件，直接将数据以二进制形式写入；对于文本文件，则需要将数据按照文件的文本格式组织好后写入.
//4. ***数据修改：可以对已存在的数据进行修改操作，即对链表中的某些节点数据进行更新。通过查找需要修改的数据节点，然后将其数据内容进行替换或更新，从而实现数据的修改。
//5. ***数据插入：可以将新的数据插入到链表的任意指定位置。
//6. ***数据删除：可以对已存在的数据进行删除操作。
//7. **数据查询：按要求对数据进行查找。
//8. 登录注册：将用户的账号和密码信息存储在文件中，用于实现用户的登录功能。在用户注册时，将新用户的账号和密码信息写入文件中进行存储；在用户登录时，从文件中读取账号密码信息，与用户输入的账号密码进行比对，从而实现用户的登录验证。




//界面层、业务逻辑层和数据持久化层
//界面层：添加删除学生，输入学生信息，展示操作成功/失败
//业务逻辑层：检查学生id是否唯一，年龄是否在合理范围内，





//int main()
//{
//	FILE* out = fopen("testt", "a");
//	int a = 100;
//	if (out == NULL)
//	{
//		perror("fopen fail!\n");
//		exit(1);
//	}
//	fprintf(out, "哈哈 %d", a);
//	return 0;
//}#define _CRT_SECURE_NO_WARNINGS

#include "SMS.h"
#include"UI.h"
#include"File.h"



//这一层是数据访问层 数据的增删查改
// 
//初始化学生链表
void studentInit(Student** pphead)
{
	*pphead = (Student*)malloc(sizeof(Student));
	(*pphead)->number = -1;
	strcpy((*pphead)->name, "nobody");
	(*pphead)->score = -1;
	(*pphead)->next = (*pphead)->prev = *pphead;
}

//得到一个新结点
Student* getNode(char* account,char* password)
{
	int number;
	char name[MAX_NAME];
	int age;
	char sex[MAX_SEX];
	int class;
	double score;

	printf("学号：");
	scanf("%d", &number);
	getchar();
	printf("姓名：");
	scanf("%s", name);
	printf("年龄：");
	scanf("%d", &age);
	getchar();
	printf("性别：");
	scanf("%s", sex);
	printf("班级：");
	scanf("%d", &class);
	printf("分数：");
	scanf("%lf", &score);

	Student* newNode = (Student*)malloc(sizeof(Student));
	if (newNode == NULL)
	{
		perror("malloc fail!\n");
		exit(1);
	}
	newNode->number = number;
	strcpy(newNode->name, name);
	newNode->age = age;
	strcpy(newNode->sex, sex);
	newNode->class = class;
	newNode->score = score;

	if (account && password)//要手动输入账号密码
	{
		strcpy(newNode->account, account);
		strcpy(newNode->password, password);

	}
	else//已经有了账号密码 直接赋值即可
	{
		scanf(" %s %s", account, password);
		strcpy(newNode->account, account);
		strcpy(newNode->password, password);
	}

	return newNode;
}

//打印指定结点的数据
void studentPrint(Student* pos)
{
	assert(!studentEmpty(pos));
	printf("学号：%d 姓名：%s 成绩：%.2lf\n", pos->number, pos->name, pos->score);
}

//判空--如果是空，返回1
int studentEmpty(Student* phead)
{
	return phead->number == -1;
}

//添加学生信息 -- 双向链表
void studentAdd(Student** pphead,char* account, char* password)
{
	assert(!studentEmpty(pphead));
	
	Student* newNode = getNode(account, password);

	//如果链表中还没有学生信息 特殊处理 直接等于新结点
	if (studentEmpty(*pphead))
	{
		*pphead = newNode;
		(*pphead)->next = (*pphead)->prev = newNode;
	}

	//链表中已经有了学生信息
	else
	{
		newNode->prev = (*pphead)->prev;
		newNode->next = *pphead;
		(*pphead)->prev->next = newNode;
		(*pphead)->prev = newNode;
	}
	writeStudentsToFile(newNode, "StudentMessage");
}

//按学号查询学生信息--返回结点
Student* numberSearch(Student* phead, int number)
{
	Student* pcur = phead;
	while (pcur)
	{
		if (number == pcur->number)
		{
			return pcur;
		}
		pcur = pcur->next;
		if (pcur == phead)
		{
			break;
		}
	}

	//pcur为空--表示未查找到
	return NULL;
}

//按照结点修改学生信息---老师修改分数
void studentChange(Student** pphead, Student* pos)
{
	assert(!studentEmpty(pos));
	double score;
	scanf("%lf", &score);
	pos->score = score;
}

//修改学生的账号密码
void studentAccChange(Student** pphead, Student* pos)
{
	char* account = "123";
	char* password = "123"; 
	scanf("%s %s", account, password);

	strcpy(account, pos->account);
	strcpy(password, pos->password);
}

//任意位置前添加新结点
void insertFront(Student** pphead, Student* pos)
{
	//判空
	assert(!studentEmpty(pphead) && !studentEmpty(pos));

	Student* newNode = getNode(NULL, NULL);

	newNode->next = pos;
	newNode->prev = pos->prev;
	pos->prev->next = newNode;
	pos->prev = newNode;

}

//任意位置后添加新结点
void insertBack(Student** pphead, Student* pos)
{
	//判空
	assert(!studentEmpty(pphead) && !studentEmpty(pos));

	Student* newNode = getNode(NULL, NULL);

	newNode->next = pos->next;
	newNode->prev = pos;
	pos->next->prev = newNode;
	pos->next = newNode;


}

//删除指定位置的数据
void studentPop(Student** pphead, Student* pos)
{
	assert(!studentEmpty(pphead) && !studentEmpty(pos));

	//如果要删除头结点中的数据--特殊处理
	if (*pphead == pos)
	{
		(*pphead)->next->prev = (*pphead)->prev;
		(*pphead)->prev->next = (*pphead)->next;
		Student* node = *pphead;
		*pphead = (*pphead)->next;
		free(node);
		node = NULL;
	}
	else
	{
		pos->next->prev = pos->prev;
		pos->prev->next = pos->next;
		free(pos);
		pos = NULL;
	}
}

//教师查看班内成绩---可以选择翻页
void teacherLook(Student* phead)
{
	Student* pcur = phead; 

	printf("1.向前        2.向后\n");
	printf("3.返回上一级  0.退出\n");
	int choice = 0;//选择1为向左 选择2为向后 选择0为退出 选择3为返回上一级

	while (1)
	{
		scanf("%d", &choice);

		switch (choice)
		{
		case 1:
			printf("%d %s %d %s %lf\n", pcur->prev->number, pcur->prev->name, pcur->prev->age, pcur->prev->sex, pcur->prev->score);//目前的上一个
			pcur = pcur->prev;
			break;
		case 2:
			printf("%d %s %d %s %lf\n", pcur->next->number, pcur->next->name, pcur->next->age, pcur->next->sex, pcur->next->score);//目前的下一个
			pcur = pcur->next;
			break;
		case 3:
			teaMenu();
			return;
		case 0:
			printf("已退出学生信息管理系统，感谢您的使用！\n");
			return;
		default:
			printf("输入错误，请重新输入\n");
			break;
		}
	}
}

//教师的初始化--录入所有教师的信息 输入
void teacherInit(Teacher** pphead)
{
	(*pphead) = (Teacher*)malloc(sizeof(Teacher));

	(*pphead)->class = 0;
	(*pphead)->next = NULL;
}

//教师信息的录入->直接录入所有的
void teacherAdd(Teacher** pphead)
{
	char name[MAX_NAME];
	char account[MAX_ACCOUNT];
	char password[MAX_PASSWORD];

	int class = 0;
	while (1)
	{
		scanf("%d", &class);
		if (class == 0)
		{
			printf("---------添加成功---------\n");
			Sleep(1000);
			system("cls");
			break;
		}
		Teacher* newNode = (Teacher*)malloc(sizeof(Teacher));
		if (newNode == NULL)
		{
			perror("malloc fail!\n");
			exit(1);
		}

		scanf("%s %s %s", name, account, password);
		newNode->class = class;
		strcpy(newNode->name, name);
		strcpy(newNode->account, account);
		strcpy(newNode->password, password);

		if ((*pphead)->class == 0)//教师中还没有数据 直接等于新节点
		{
			(*pphead) = newNode;
		}
		else
		{
			//使用头插 时间复杂度O（1）
			newNode->next = (*pphead);
			(*pphead) = newNode;
		}
	}
	writeTeachersToFile((*pphead), "TeacherMessage");
}

//注册
void Register()
{
	char account[MAX_ACCOUNT];
	printf("请输入账号：");
	scanf("%s", account);

	if (!strcmp("0", account))//返回
	{
		return;
	}

	char password1[MAX_PASSWORD];
	char password2[MAX_PASSWORD];

	while (1)
	{
		printf("请输入密码：");
		scanf("%s", password1);
		printf("请再次确定密码：");
		scanf("%s", password2);

		if (strcmp(password1, password2))
		{
			printf("输入的密码不一致，请重新输入\n");
		}
		else
		{
			printf("请完善您的信息\n");
			studentAdd(&S, account, password1);

			printf("------------注册成功，请返回登录!---------------\n");
			Sleep(1000);
			system("cls");
			break;
		}
	}
}

//修改密码
void pasChange(Student** pphead, Student* pos)
{
	//先根据学号查找到信息，然后进行密码修改

	char password[MAX_PASSWORD];
	scanf("%s", password);

	strcpy(pos->password, password);
}

//查找账号密码--管理员操作
//先根据学号查找到信息，然后输出账号密码
void pasSearch(Student* pos)
{
	assert(!studentEmpty(pos));

	printf("%s %s\n", pos->account, pos->password);
}



//用来判断输入值是否是整数
//直接在此函数输入
int ifInt()
{
    int choice;

	char ch;


	while (1)
	{
		ch = getchar();
		if (ch == '\n')
		{
			continue;
		}
		if (ch >= '0' && ch <= '9')//输入的是整数
		{
			choice = ch - '0';
			return choice;
		}
		if(ch <= '0' || ch >= '9' || ch != '\n')
		{
			printf("-------输入错误，请输入一个整数！-------\n");
		}
	}

}

//根据账号查找学生
Student* accStudentSearch(Student* phead, char* account)
{
	Student* pcur = phead;
	
	while (pcur)
	{
		if (!strcmp(account, pcur->account))
		{
			return pcur;
		}
		pcur = pcur->next;
		if (pcur == phead)
		{
			break;
		}
	}

	return NULL;
}

//根据账号查找教师
Teacher* accTeacherSearch(Teacher* phead, char* account)
{
	Teacher* pcur = phead;

	while (pcur)
	{
		if (!strcmp(account, pcur->account))
		{
			return pcur;
		}
		pcur = pcur->next;
		if (pcur == phead)
		{
			break;
		}
	}
	return pcur;
}




//文件
void File(const char* sourceFilename, const char* targetFilename)
{
	FILE* sourceFile = fopen(sourceFilename, "r");
	if (sourceFile == NULL) {
		perror("-------------------无法打开源文件-------------------");
		return;
	}
	FILE* targetFile = fopen(targetFilename, "a");//追加方式写入
	if (targetFilename == NULL)
	{
		perror("-------------------无法打开目标文件-------------------");
		fclose(sourceFilename);
		return;
	}
	int ch;
	while ((ch = fgetc(sourceFile)) != EOF)
	{
		fputc(ch, targetFile);
	}
	fclose(sourceFile);
	fclose(targetFile);
}